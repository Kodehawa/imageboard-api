plugins {
    id 'java'
    id 'maven-publish'
}

import org.apache.tools.ant.filters.ReplaceTokens
def versionObj = new Version(major: 2, minor: 4, revision: 5)

group 'net.kodehawa'
version "$versionObj"

def artifactid = 'imageboard-api'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.1'
    implementation 'com.squareup.okhttp3:okhttp:3.14.9'
    implementation 'org.slf4j:slf4j-api:1.7.30'

    testImplementation 'ch.qos.logback:logback-classic:1.2.3'
    testImplementation 'junit:junit:4.13.1'
}

task sourcesForRelease(type: Copy) {
    from 'src/main/java'
    into 'build/filteredSrc'
}

//Task for the versioning system
task prepareSource(type: Copy) {
    from 'src/main/java'
    into 'build/prepared-src'
    filter(ReplaceTokens, tokens: [
            version: versionObj.toString()
    ])
    dependsOn clean
}
prepareSource.dependsOn clean

compileJava {
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath

    options.encoding = 'UTF-8'

    dependsOn sourcesForRelease
}

jar {
    manifest {
        attributes 'Implementation-Version': archiveVersion
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier("sources")
    from "${buildDir}/filteredSrc"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier("javadoc")
    from javadoc.destinationDir
}

build {
    dependsOn clean
    dependsOn jar
    dependsOn javadocJar
    dependsOn sourcesJar

    dependsOn test

    jar.mustRunAfter clean
    javadocJar.mustRunAfter jar
    sourcesJar.mustRunAfter javadocJar
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}" + (revision == "0" ? "" : ".${revision}")
    }
}